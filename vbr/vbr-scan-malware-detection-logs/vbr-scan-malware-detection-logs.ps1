param (
    [int]$Days = 7,
    [Switch]$Outhtml,
    [string]$Outpath = "."
)

# Variables
$AnalyzeLogDirectory      = "C:\ProgramData\Veeam\Backup\Malware_Detection_Logs"
$AnalyzeLogFilter         = "*.log"
$SearchAntivirusDirectory = "C:\ProgramData\Veeam\Backup\FLRSessions\Windows"

# Function for the Malware Detection Logs folder
function Analyze-MalwareDetectionLogs {
    param (
        [string]$AnalyzeLogDirectory,
        [string]$AnalyzeLogFilter,
        [int]$Days,
        [Switch]$HtmlOutput,
        [string]$Outpath
    )

    $cutoffDate = (Get-Date).AddDays(-$Days)

    # Pattern for the Warning messages
    $linePattern   = "\[(\d{2})\.(\d{2})\.(\d{4})\s(\d{2}):(\d{2}):(\d{2})\.\d+\]\s+<\d+>\s+Warning\s+\(\d+\)\s+(.*)"
    $matchingLines = @()

    $logFiles = Get-ChildItem -Path $AnalyzeLogDirectory -Filter $AnalyzeLogFilter

    foreach ($logFile in $logFiles) {
        $source = if ($logFile.Name -match "^(indicators_of_compromise|suspicious_files)_") {
            $matches[1]
        } else {
            "Unknown"
        }

        $content = Get-Content $logFile.FullName

        foreach ($line in $content) {
            if ($line -match $linePattern) {
                $day     = $matches[1]
                $month   = $matches[2]
                $year    = $matches[3]
                $hour    = $matches[4]
                $minute  = $matches[5]
                $second  = $matches[6]
                $message = $matches[7]
                $logDate = Get-Date -Year $year -Month $month -Day $day -Hour $hour -Minute $minute -Second $second -ErrorAction SilentlyContinue
                
                if ($logDate -ge $cutoffDate) {
                    $matchingLines += [PSCustomObject]@{
                        Date    = $logDate
                        Source  = $source
                        Message = $message
                    }
                }
            }
        }
    }

    $sortedLines = $matchingLines | Sort-Object -Property Date -Descending

    return $sortedLines
}

# Function to Search FLR Session Antivirus Folder / Extracting Veeam Threat Hunter messages
function Search-ThreatHunterMessages {
    param (
        [string]$RootDirectory,
        [string]$LogFilter,
        [string]$SearchPattern,
        [int]$Days
    )

    $cutoffDate = (Get-Date).AddDays(-$Days)
    $matchingLines = @()

    $logFiles = Get-ChildItem -Path $RootDirectory -Recurse -Filter $LogFilter

    foreach ($logFile in $logFiles) {
        $content = Get-Content $logFile.FullName

        foreach ($line in $content) {
            if ($line -match $SearchPattern) {
                $day     = $matches[1]
                $month   = $matches[2]
                $year    = $matches[3]
                $hour    = $matches[4]
                $minute  = $matches[5]
                $second  = $matches[6]
                $logDate = Get-Date -Year $year -Month $month -Day $day -Hour $hour -Minute $minute -Second $second -ErrorAction SilentlyContinue

                if ($logDate -ge $cutoffDate) {
                    $message = $line -replace ".*Antivirus output: ", ""
                    $matchingLines += [PSCustomObject]@{
                        Date    = $logDate
                        Source  = "Threat Hunter"
                        Message = $message
                    }
                }
            }
        }
    }

    $sortedLines = $matchingLines | Sort-Object -Property Date -Descending
    return $sortedLines
}

# Generate Basic HTML Report
function Generate-HTMLReport {
    param (
        [array]$LogEntries,
        [string]$Title,
        [string]$Outpath
    )

    $currentTimestamp = (Get-Date).ToString("yyyyMMdd_HHmmss")
    $outputFile       = Join-Path -Path $Outpath -ChildPath "${Title}_$currentTimestamp.html"
    $htmlContent      = @"
<!DOCTYPE html>
<html>
<head>
    <title>$Title</title>
    <style>
        body { font-family: Arial, sans-serif; }
        table { width: 100%; border-collapse: collapse; margin-top: 20px; }
        th, td { padding: 10px; text-align: left; border: 1px solid #ddd; }
        th { background-color: #f2f2f2; }
        tr:nth-child(even) { background-color: #f9f9f9; }
        tr:nth-child(odd) { background-color: #ffffff; }
    </style>
</head>
<body>
    <h1>$Title</h1>
    <table>
        <thead>
            <tr>
                <th>Date</th>
                <th>Source/File</th>
                <th>Message</th>
            </tr>
        </thead>
        <tbody>
"@

    foreach ($entry in $LogEntries) {
        $htmlContent += "<tr><td>$($entry.Date)</td><td>$($entry.Source)</td><td>$($entry.Message)</td></tr>`n"
    }

    $htmlContent += @"
        </tbody>
    </table>
   </body>
</html>
"@

    $htmlContent | Set-Content -Path $outputFile
    Write-Host "HTML report generated: $outputFile"
}

### Start
# Malware Detection Logs
$analyzeMalwareDetection = Analyze-MalwareDetectionLogs -AnalyzeLogDirectory $AnalyzeLogDirectory -AnalyzeLogFilter $AnalyzeLogFilter -Days $Days

# Veeam Threat Hunter - Currently keeping the search pattern out of the function for flexibility/testing purposes
$searchPattern           = "\[(\d{2})\.(\d{2})\.(\d{4})\s(\d{2}):(\d{2}):(\d{2})\.\d+\]\s+<\d+>\s+Warning\s+\(\d+\)\s+Threat found\. Antivirus output:"
$analyzeThreatHunter     = Search-ThreatHunterMessages -RootDirectory $SearchAntivirusDirectory -LogFilter "*.log" -SearchPattern $searchPattern -Days $Days

$analyzeMalwareDetection = @($analyzeMalwareDetection)
$analyzeThreatHunter     = @($analyzeThreatHunter)
$allResults              = ($analyzeMalwareDetection + $analyzeThreatHunter) | Sort-Object -Property Date -Descending

if ($Outhtml) {
    Generate-HTMLReport -LogEntries $allResults -Title "Log_Analysis_Report" -Outpath $Outpath
} else {
    Write-Host "[Date] [Source/File] - Message"
    $allResults | ForEach-Object {
        Write-Host "[$($_.Date)] [$($_.Source)] - $($_.Message)"
    }
}
