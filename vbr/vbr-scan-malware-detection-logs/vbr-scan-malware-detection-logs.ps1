param (
    [int]$Days = 7,
    [Switch]$Outhtml,
    [string]$Outpath = "."
)

# Variables
$AnalyzeLogDirectory = "C:\ProgramData\Veeam\Backup\Malware_Detection_Logs"
$AnalyzeLogFilter    = "*.log"

# Function for the Malware Detection Logs folder. Maybe more to come ;)
function Analyze-LogFiles {
    param (
        [string]$AnalyzeLogDirectory,
        [string]$AnalyzeLogFilter,
        [int]$Days,
        [Switch]$HtmlOutput,
        [string]$Outpath
    )

    $cutoffDate = (Get-Date).AddDays(-$Days)

    # Pattern for the Warning messages. 
    $linePattern   = "\[(\d{2})\.(\d{2})\.(\d{4})\s(\d{2}):(\d{2}):(\d{2})\.\d+\]\s+<\d+>\s+Warning\s+\(\d+\)\s+(.*)"
    $matchingLines = @()

    $logFiles = Get-ChildItem -Path $AnalyzeLogDirectory -Filter $AnalyzeLogFilter

    foreach ($logFile in $logFiles) {
        $source = if ($logFile.Name -match "^(indicators_of_compromise|suspicious_files)_") {
            $matches[1]
        } else {
            "Unknown"
        }

        $content = Get-Content $logFile.FullName

        foreach ($line in $content) {
            if ($line -match $linePattern) {
                $day     = $matches[1]
                $month   = $matches[2]
                $year    = $matches[3]
                $hour    = $matches[4]
                $minute  = $matches[5]
                $second  = $matches[6]
                $message = $matches[7]
                $logDate = Get-Date -Year $year -Month $month -Day $day -Hour $hour -Minute $minute -Second $second -ErrorAction SilentlyContinue
                
                if ($logDate -ge $cutoffDate) {
                    $matchingLines += [PSCustomObject]@{
                        Date    = $logDate
                        Source  = $source
                        Message = $message
                    }
                }
            }
        }
    }

    $sortedLines = $matchingLines | Sort-Object -Property Date -Descending

    # Generate HTML Report
    if ($HtmlOutput) {
        $currentTimestamp = (Get-Date).ToString("yyyyMMdd_HHmmss")
        $outputFile       = Join-Path -Path $Outpath -ChildPath "FoundFiles_$currentTimestamp.html"
        $htmlContent      = @"
<!DOCTYPE html>
<html>
<head>
    <title>Found files for the past $Days days</title>
    <style>
        body { font-family: Arial, sans-serif; }
        table { width: 100%; border-collapse: collapse; margin-top: 20px; }
        th, td { padding: 10px; text-align: left; border: 1px solid #ddd; }
        th { background-color: #f2f2f2; }
        tr:nth-child(even) { background-color: #f9f9f9; }
        tr:nth-child(odd) { background-color: #ffffff; }
    </style>
</head>
<body>
    <h1>Found files for the past $Days days</h1>
    <table>
        <thead>
            <tr>
                <th>Date</th>
                <th>Source</th>
                <th>Message</th>
            </tr>
        </thead>
        <tbody>
"@

        foreach ($line in $sortedLines) {
            $htmlContent += "<tr><td>$($line.Date)</td><td>$($line.Source)</td><td>$($line.Message)</td></tr>`n"
        }

        $htmlContent += @"
        </tbody>
    </table>
   </body>
</html>
"@

        $htmlContent | Set-Content -Path $outputFile
        Write-Host "HTML report generated: $outputFile"
    } else {
        if ($sortedLines.Count -gt 0) {
            Write-Host "[Date] [Source] - Message"
            $sortedLines | ForEach-Object {
                Write-Host "[$($_.Date)] [$($_.Source)] - $($_.Message)"
            }
        } else {
            Write-Host "No matching entries found for the past $Days days in directory: $AnalyzeLogDirectory"
        }
    }
}

# Main Section
Analyze-LogFiles -AnalyzeLogDirectory $AnalyzeLogDirectory -AnalyzeLogFilter $AnalyzeLogFilter -Days $Days -HtmlOutput:$Outhtml -Outpath $Outpath

