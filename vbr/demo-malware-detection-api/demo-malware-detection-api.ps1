Param(
      [Switch]$Trigger
)
Clear-Host

# General Variables - Please change where necessary
$APIversion   = "v1"
$utcNow       = Get-Date -UFormat "%Y-%m-%dT%H:%M:%S.%333Z"
$veeamAPI     = "https://localhost:9419"

# Function for getting the Bearer Token
function Connect-VeeamRestAPI {
    [CmdletBinding()]
    param (
        [string] $AppUri,
        [pscredential] $Cred
    )

    begin {
        $header = @{
            "Content-Type"  = "application/x-www-form-urlencoded"
            "x-api-version" = "1.1-rev1"
            "accept"        = "application/json"
        }
        
        $body = @{
            "grant_type" = "password"
            "username" = $cred.UserName 
            "password" = $cred.GetNetworkCredential().password
            "refresh_token" = " "
            "rememberMe" = " "
        }

        $requestURI = $veeamAPI + $appUri

        $tokenRequest = Invoke-RestMethod -Uri $requestURI -Headers $header -Body $body -Method Post 
        Write-Output $tokenRequest.access_token
    }
    
}

# Function GET RestAPI data
function Get-VeeamRestAPI {
    [CmdletBinding()]
    param (
        [string] $AppUri,
        [string] $Token
    )

    begin {
        $header = @{
            "accept" = "application/json"
            "x-api-version" = "1.1-rev1"
            "Authorization" = "Bearer $Token"
        }
        $requestURI = $veeamAPI + $AppUri
        $results = Invoke-RestMethod -Method GET -Uri $requestUri -Headers $header
        Write-Output $results
    }
}

# Function POST Veeam RestAPI
function Post-VeeamRestAPI {
    [CmdletBinding()]
    param (
        [string] $AppUri,
        [string] $token,
        [string] $body
    )

    begin {
        $header = @{
            "accept" = "application/json"
            "x-api-version" = "1.1-rev1"
            "Content-Type" = "application/json"
            "Authorization" = "Bearer $Token"
        }
        $requestURI = $veeamAPI + $appUri
        $tokenRequest = Invoke-RestMethod -Uri $requestURI -Headers $header -Body $body -Method Post 
        Write-Output $tokenRequest
    }
}
        
# Get credentials - The ones you need to login to the Management Console
$cred = Get-Credential -Message "Please enter your VBR credentials" -UserName Administrator

#Ignore any self-signed certificate
[System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true}

#Request Bearer Token
Write-Host "Get Bearer Token...."
Write-Host ""
$appURI             = "/api/oauth2/token"
$token              = Connect-VeeamRestAPI -AppUri $appURI -Cred $cred

# Get all malware detection events
Write-Host "Getting malware detection events...." -ForegroundColor White
Write-Host ""
Write-Host "Last 10 events"
$appURI             = "/api/$APIversion/malwareDetection/events/"
$vbrMalwareEvt      = Get-VeeamRestAPI -AppUri $appURI -Token $token
$tableData          = @()

foreach ($entry in $vbrMalwareEvt.data) {
    $rowData = New-Object PSObject -property @{
        'TimeUtc'    = $entry.detectionTimeUtc
        'Severity'   = $entry.severity
        'Source'     = $entry.source
        'Details'    = $entry.Details
    }
    $tableData      += $rowData
}
$tableData = $tableData | Sort-Object TimeUtc -Descending
$tableData | Select-Object -Last 10 | Format-Table -Property TimeUtc, Severity, Source, Details -AutoSize

# Trigger a test event
if($Trigger){

#Building Body trigger a malware alert - Mimimun 2. Others are uuid or ipv6
$body_data = @{
    detectionTimeUtc = "$($utcNow)"
    machine = @{
                 fqdn          = "<your host name here>"
                 ipv4          = "<your IPv4 address here>"
                }
    details = "Malware Detection Test Trigger"
    engine  = "YAMT Test Script"
}

Write-Host "Trigger malware detection event...." -ForegroundColor White
Write-Host ""
$appURI             = "/api/$APIversion/malwareDetection/events"
$body_json          = $body_data | ConvertTo-Json
Post-VeeamRestAPI -AppUri $appURI -Token $token -body $body_json

}          
