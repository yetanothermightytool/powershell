Param(
      [String]$FileChanged,
      [String]$Action
)
Clear-Host

# General Variables - Please change where necessary
$APIversion        = "v1"
$utcNow            = Get-Date -UFormat "%Y-%m-%dT%H:%M:%S.%333Z"
$veeamAPI          = "https://<your host here>:9419"

# Credentials - Store them in advance
$userName          = "Administrator"
$securePassword    = Get-Content "<your passwordfile here>" | ConvertTo-SecureString
$Cred              = New-Object System.Management.Automation.PSCredential -ArgumentList $userName, $securePassword

# Function for getting the Bearer Token
function Connect-VeeamRestAPI {
    [CmdletBinding()]
    param (
        [string] $AppUri,
        [PSCredential] $Cred
        )

    begin {
        $header = @{
            "Content-Type"  = "application/x-www-form-urlencoded"
            "x-api-version" = "1.1-rev1"
            "accept"        = "application/json"
        }
        
        $body = @{
            "grant_type" = "password"
            "username" = $Cred.UserName
            "password" = $Cred.GetNetworkCredential().Password
            "refresh_token" = " "
            "rememberMe" = " "
        }

        $requestURI = $veeamAPI + $appUri

        $tokenRequest = Invoke-RestMethod -Uri $requestURI -Headers $header -Body $body -Method Post 
        Write-Output $tokenRequest.access_token
    }
    
}

# Function GET RestAPI data
function Get-VeeamRestAPI {
    [CmdletBinding()]
    param (
        [string] $AppUri,
        [string] $Token
    )

    begin {
        $header = @{
            "accept" = "application/json"
            "x-api-version" = "1.1-rev1"
            "Authorization" = "Bearer $Token"
        }
        $requestURI = $veeamAPI + $AppUri
        $results = Invoke-RestMethod -Method GET -Uri $requestUri -Headers $header
        Write-Output $results
    }
}

# Function POST Veeam RestAPI
function Post-VeeamRestAPI {
    [CmdletBinding()]
    param (
        [string] $AppUri,
        [string] $token,
        [string] $body
    )

    begin {
        $header = @{
            "accept" = "application/json"
            "x-api-version" = "1.1-rev1"
            "Content-Type" = "application/json"
            "Authorization" = "Bearer $Token"
        }
        $requestURI = $veeamAPI + $appUri
        $tokenRequest = Invoke-RestMethod -Uri $requestURI -Headers $header -Body $body -Method Post 
        Write-Output $tokenRequest
    }
}
       
#Ignore any self-signed certificate - This is insecure and should only be used in test environments
[System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true}

#Request Bearer Token
Write-Host "Get Bearer Token...."
Write-Host ""
$appURI             = "/api/oauth2/token"
$token              = Connect-VeeamRestAPI -AppUri $appURI -Cred $Cred

$body_data = @{
    detectionTimeUtc = "$($utcNow)"
    machine = @{
                 fqdn          = "<fqdn here>"
                 ipv4          = "<ip address here>"
                }
    details = "File changes detected. File: $FileChanged - Action: $Action"
    engine  = "YAMT - File Integrity Monitor"
}

Write-Host "Triggerevent...." -ForegroundColor White
Write-Host ""

$appURI             = "/api/$APIversion/malwareDetection/events"
$body_json          = $body_data | ConvertTo-Json
Post-VeeamRestAPI -AppUri $appURI -Token $token -body $body_json
